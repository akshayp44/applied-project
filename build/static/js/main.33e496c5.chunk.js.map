{"version":3,"sources":["Slider.js","App.js","serviceWorker.js","index.js"],"names":["Slider","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","goToPrevSlide","state","currentIndex","setState","prevState","translateValue","slideWidth","goToNextSlide","images","length","document","querySelector","clientWidth","react_default","a","createElement","className","style","transform","concat","transition","map","image","i","Slider_Slide","key","Slider_LeftArrow","Slider_RightArrow","React","Component","Slide","_ref","styles","backgroundImage","backgroundSize","backgroundRepeat","backgroundPosition","LeftArrow","onClick","aria-hidden","RightArrow","ReactDOM","render","Slider_Slider","App","src_Slider","Boolean","window","location","hostname","match","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAGMA,qBACF,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAeRQ,cAAgB,WACiB,IAA5BP,EAAKQ,MAAMC,cAGdT,EAAKU,SAAS,SAAAC,GAAS,MAAK,CAC1BF,aAAcE,EAAUF,aAAe,EACvCG,eAAgBD,EAAUC,eAAiBZ,EAAKa,iBAtBjCb,EA0BnBc,cAAgB,WAId,GAAGd,EAAKQ,MAAMC,eAAiBT,EAAKQ,MAAMO,OAAOC,OAAS,EACxD,OAAOhB,EAAKU,SAAS,CACnBD,aAAc,EACdG,eAAgB,IAKpBZ,EAAKU,SAAS,SAAAC,GAAS,MAAK,CAC1BF,aAAcE,EAAUF,aAAe,EACvCG,eAAgBD,EAAUC,gBAAmBZ,EAAKa,iBAxCnCb,EA4CnBa,WAAa,WACV,OAAOI,SAASC,cAAc,UAAUC,aA1CzCnB,EAAKQ,MAAQ,CACXO,OAAQ,CACN,uDACA,uDACA,kEACA,mEAGFN,aAAc,EACdG,eAAgB,GAZDZ,wEAiDjB,OACEoB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAEbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbC,MAAO,CACLC,UAAS,cAAAC,OAAgBvB,KAAKK,MAAMI,eAA3B,OACTe,WAAY,6BAGVxB,KAAKK,MAAMO,OAAOa,IAAI,SAACC,EAAOC,GAAR,OACpBV,EAAAC,EAAAC,cAACS,EAAD,CAAOC,IAAKF,EAAGD,MAAOA,OAK9BT,EAAAC,EAAAC,cAACW,EAAD,CACC1B,cAAeJ,KAAKI,gBAGrBa,EAAAC,EAAAC,cAACY,EAAD,CACCpB,cAAeX,KAAKW,wBAtEVqB,IAAMC,YA6EVtC,IACTuC,EAAQ,SAAAC,GAAe,IAAZT,EAAYS,EAAZT,MACTU,EAAS,CACbC,gBAAe,OAAAd,OAASG,EAAT,KACfY,eAAgB,QAChBC,iBAAkB,YAClBC,mBAAoB,WAEtB,OAAOvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQC,MAAOe,KAIjCK,EAAY,SAAC7C,GACjB,OACEqB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAkBsB,QAAS9C,EAAMQ,eAC9Ca,EAAAC,EAAAC,cAAA,KAAGC,UAAU,yBAAyBuB,cAAY,WAMlDC,EAAa,SAAChD,GAClB,OACEqB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAkBsB,QAAS9C,EAAMe,eAC9CM,EAAAC,EAAAC,cAAA,KAAGC,UAAU,0BAA0BuB,cAAY,WAKzDE,IAASC,OACP7B,EAAAC,EAAAC,cAAC4B,EAAD,MACAjC,SAASC,cAAc,aClGZiC,mLARX,OACE/B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAC8B,EAAD,cAJUhB,aCSEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNT,IAASC,OAAO7B,EAAAC,EAAAC,cAACoC,EAAD,MAASzC,SAAS0C,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.33e496c5.chunk.js","sourcesContent":["// eslint-disable-next-line\r\nimport React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom'\r\nclass Slider extends React.Component {\r\n    constructor(props) {\r\n      super(props)\r\n  \r\n      this.state = {\r\n        images: [\r\n          \"http://www.ffutche.org/gallery_pictures/DSC_0190.JPG\",\r\n          \"http://www.ffutche.org/gallery_pictures/DSC_0191.JPG\",\r\n          \"http://www.sagiusa.org/wp-content/uploads/2018/01/Air-Plane.jpg\",\r\n          \"https://s3.us-east-2.amazonaws.com/dzuz14/thumbnails/desert.jpg\",\r\n\r\n        ],\r\n        currentIndex: 0,\r\n        translateValue: 0\r\n      }\r\n    }\r\n  \r\n    goToPrevSlide = () => {\r\n      if(this.state.currentIndex === 0)\r\n        return;\r\n      \r\n      this.setState(prevState => ({\r\n        currentIndex: prevState.currentIndex - 1,\r\n        translateValue: prevState.translateValue + this.slideWidth()\r\n      }))\r\n    }\r\n  \r\n    goToNextSlide = () => {\r\n      // Exiting the method early if we are at the end of the images array.\r\n      // We also want to reset currentIndex and translateValue, so we return\r\n      // to the first image in the array.\r\n      if(this.state.currentIndex === this.state.images.length - 1) {\r\n        return this.setState({\r\n          currentIndex: 0,\r\n          translateValue: 0\r\n        })\r\n      }\r\n      \r\n      // This will not run if we met the if condition above\r\n      this.setState(prevState => ({\r\n        currentIndex: prevState.currentIndex + 1,\r\n        translateValue: prevState.translateValue + -(this.slideWidth())\r\n      }));\r\n    }\r\n  \r\n    slideWidth = () => {\r\n       return document.querySelector('.slide').clientWidth\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <div className=\"slider\">\r\n  \r\n          <div className=\"slider-wrapper\"\r\n            style={{\r\n              transform: `translateX(${this.state.translateValue}px)`,\r\n              transition: 'transform ease-out 0.45s'\r\n            }}>\r\n              {\r\n                this.state.images.map((image, i) => (\r\n                  <Slide key={i} image={image} />\r\n                ))\r\n              }\r\n          </div>\r\n  \r\n          <LeftArrow\r\n           goToPrevSlide={this.goToPrevSlide}\r\n          />\r\n  \r\n          <RightArrow\r\n           goToNextSlide={this.goToNextSlide}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default Slider;\r\n  const Slide = ({ image }) => {\r\n    const styles = {\r\n      backgroundImage: `url(${image})`,\r\n      backgroundSize: 'cover',\r\n      backgroundRepeat: 'no-repeat',\r\n      backgroundPosition: '50% 60%'\r\n    }\r\n    return <div className=\"slide\" style={styles}></div>\r\n  }\r\n  \r\n  \r\n  const LeftArrow = (props) => {\r\n    return (\r\n      <div className=\"backArrow arrow\" onClick={props.goToPrevSlide}>\r\n        <i className=\"fa fa-arrow-left fa-2x\" aria-hidden=\"true\"></i>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  \r\n  const RightArrow = (props) => {\r\n    return (\r\n      <div className=\"nextArrow arrow\" onClick={props.goToNextSlide}>\r\n        <i className=\"fa fa-arrow-right fa-2x\" aria-hidden=\"true\"></i>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  ReactDOM.render(\r\n    <Slider />,\r\n    document.querySelector('.app')\r\n  )\r\n  ","import React, { Component } from 'react';\nimport './App.css';\nimport Slider from './Slider.js';\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"Slider\">\n        <Slider/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}